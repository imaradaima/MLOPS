name: run-pipeline

on:
  workflow_call:
    inputs:
      parameters_file:
        required: true
        type: string          # path to your pipeline YAML (job) in repo
      resource_group:
        required: true
        type: string
      workspace_name:
        required: true
        type: string
      job_name:
        required: true
        type: string
    secrets:
      creds:
        required: true

jobs:
  run-pipeline:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Azure login
        uses: azure/login@v2
        with:
          creds: ${{ secrets.creds }}

      - name: Install / update Azure ML CLI extension
        run: |
          set -euo pipefail
          az extension add -n ml -y || az extension update -n ml

      - name: Set AML defaults & verify workspace
        run: |
          set -euo pipefail
          az configure --defaults \
            group="${{ inputs.resource_group }}" \
            workspace="${{ inputs.workspace_name }}" \
            location="eastus"
          az ml workspace show -o table

      - name: Run pipeline job and wait
        env:
          PIPELINE_FILE: ${{ github.workspace }}/${{ inputs.parameters_file }}
          JOB_NAME: ${{ inputs.job_name }}
        run: |
          set -euo pipefail

          # Create the job (use provided name)
          run_id=$(az ml job create \
            --file "$PIPELINE_FILE" \
            --name "$JOB_NAME" \
            --query name -o tsv)

          if [[ -z "${run_id:-}" ]]; then
            echo "❌ Job creation failed"; exit 3
          fi

          echo "▶️  Submitted job: $run_id"
          az ml job show -n "$run_id" --web || true

          # Poll status until terminal state
          terminal=("Completed" "Failed" "Canceled" "NotResponding")
          running=("NotStarted" "Queued" "Starting" "Preparing" "Running" "Finalizing" "CancelRequested")

          status=$(az ml job show -n "$run_id" --query status -o tsv)
          echo "Current status: $status"

          while [[ " ${running[*]} " =~ " ${status} " ]]; do
            sleep 15
            status=$(az ml job show -n "$run_id" --query status -o tsv)
            echo "Current status: $status"
          done

          echo "Final status: $status"

          if [[ "$status" != "Completed" ]]; then
            echo "❌ Pipeline job failed or canceled"
            # Surface service-side error message if available
            az ml job show -n "$run_id" -o jsonc || true
            exit 5
          fi

          # Print output artifact URIs (optional, helpful for downstream steps)
          echo "Outputs:"
          az ml job show -n "$run_id" --query outputs -o jsonc || true

          
         

