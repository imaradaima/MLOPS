name: run-pipeline

on:
  workflow_call:
    inputs:
      parameters_file:
        required: true
        type: string
      resource_group:
        required: true
        type: string
      workspace_name:
        required: true
        type: string
      job_name:
        required: true
        type: string
    secrets:
      creds:
        required: true

jobs:
  run-pipeline:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Azure login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.creds }}

      - name: Install AML extension
        run: |
          az extension add -n ml -y || az extension update -n ml

      - name: Echo inputs and verify files
        run: |
          echo "RG=${{ inputs.resource_group }}"
          echo "WS=${{ inputs.workspace_name }}"
          echo "PARAMS_FILE=${{ github.workspace }}/${{ inputs.parameters_file }}"
          test -f "${{ github.workspace }}/${{ inputs.parameters_file }}" || { echo "❌ Parameters file not found"; exit 11; }
          echo "Repo tree:"
          ls -R

      - name: Validate pipeline file
        run: |
          az ml job validate \
            --file "${{ github.workspace }}/${{ inputs.parameters_file }}" \
            --resource-group "${{ inputs.resource_group }}" \
            --workspace-name "${{ inputs.workspace_name }}" \
          || { echo "❌ az ml job validate failed"; exit 12; }

      - name: Create job
        id: create
        run: |
          set -e
          RUN_ID=$(az ml job create \
            --file "${{ github.workspace }}/${{ inputs.parameters_file }}" \
            --resource-group "${{ inputs.resource_group }}" \
            --workspace-name "${{ inputs.workspace_name }}" \
            --name "${{ inputs.job_name }}" \
            --query name -o tsv) || { echo "❌ az ml job create failed"; exit 13; }

          echo "run_id=$RUN_ID" >> $GITHUB_OUTPUT
          echo "Created run: $RUN_ID"
          az ml job show -n "$RUN_ID" -g "${{ inputs.resource_group }}" -w "${{ inputs.workspace_name }}" -o yaml

      - name: Stream until completion
        run: |
          RUN_ID="${{ steps.create.outputs.run_id }}"
          echo "Streaming logs for: $RUN_ID"
          az ml job stream -n "$RUN_ID" -g "${{ inputs.resource_group }}" -w "${{ inputs.workspace_name }}" || true

          STATUS=$(az ml job show -n "$RUN_ID" -g "${{ inputs.resource_group }}" -w "${{ inputs.workspace_name }}" --query status -o tsv)
          echo "Final status: $STATUS"
          case "$STATUS" in
            Completed) exit 0 ;;
            *) echo "❌ Pipeline finished with status: $STATUS"; exit 14 ;;
          esac
